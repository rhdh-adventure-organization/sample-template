---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: sample-template
  title: Sample Software Template from Backstage
  description: Sample scaffolder template for demo purposes
  tags:
    - sample
    - git
    - rhdh-adventure
spec:
  owner: rhdh-adventure
  type: library
  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Provide information about the new component
      required:
        - name
        - description
        - owner
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          maxLength: 50
          pattern: '^([a-zA-Z][a-zA-Z0-9]*)(-[a-zA-Z0-9]+)*$'
          ui:autofocus: true
          ui:help: Provide an unique name to identify the component
        description:
          title: Description
          type: string
          description: Help others understand what this component is for
          ui:help: Short description of this new component
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:help: Who is the owner of this new component?
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - Group
                - User
    - title: Choose a location
      required:
        - gitType
        - repoUrl
      properties:
        gitType:
          title: Git Server to publish the component
          type: string
          description: Choose the Git Server to publish the component
          #default: gitlab
          enum:
            - github
            - gitlab
          enumNames:
            - 'GitHub'
            - 'GitLab'
        repoUrl:
          title: Repository Location
          type: string
          description: Full url of the GitLab server to publish the content of this component
          #default: 'gitlab.com'
          ui:help: Full url of the GitLab server to publish the content of this component
          #ui:field: RepoUrlPicker
          #ui:options:
          #  rows: 5
  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: fetch-base
      name: Fetching and generating the source code
      action: fetch:template
      input:
        url: ./skeleton
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner | parseEntityRef | pick('name') }}
          repoUrl: ${{ parameters.repoUrl }}?owner=${{ parameters.owner | parseEntityRef | pick('name') }}&repo=${{ parameters.name }}

    - id: publish
      name: Publishing to the GitLab Server
      if: ${{ parameters.gitType === "gitlab" }}
      action: publish:gitlab
      input:
        description: ${{ parameters.description }}
        repoUrl: ${{ parameters.repoUrl }}?owner=${{ parameters.owner | parseEntityRef | pick('name') }}&repo=${{ parameters.name }}
        repoVisibility: public
        defaultBranch: main

    - id: publish
      name: Publish to the GitHub Server
      if: ${{ parameters.gitType === "github" }}
      action: publish:github
      input:
        allowedHosts:
          - github.com
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}
        repoVisibility: public
        defaultBranch: main

    - id: register
      name: Registering the Catalog Info
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # some outputs which are saved along with the job for use in the frontend
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
